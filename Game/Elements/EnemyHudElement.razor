@using TBRPG_1.Game.Lib
@using TBRPG_1.Game.Hud
@inherits SourceElement

@BuildRenderItem()

@code {
    
    public readonly string ActionBarTag = IIdentity.CreateUUID;
    public readonly string HPBarTag = IIdentity.CreateUUID;
    public readonly string EnemyHudContainer = IIdentity.CreateUUID;

    public override RenderFragment BuildRenderItem(Func<RenderFragment> induce = null)
    {
        return base.BuildRenderItem(() =>
        {
            return
                @<SourceElement Parent=@this Tag=@EnemyHudContainer>
                    @foreach (var renderItems in GetRenderItems())
                    {
                        @renderItems
                    }
                </SourceElement>;
        });
    }

    public Rectangle PercentBarBox = new()
    {
        X = 0,
        Y = 0,
        Width = 300,
        Height = 30
    };
    
    public Rectangle ActionBarBox = new()
    {
        X = 0,
        Y = 0,
        Width = 300,
        Height = 10
    };
    
    Percentage HPPercentage = new Percentage(1000, 1000);
    Percentage ActionPercentage = new Percentage(100, 0);
    
    [Parameter]
    public EnemyHudOptions EnemyHudOptions { get; set; } = new();

    public void WithActionBar()
    {
        WhenInitialized<SourceElement>(ActionBarTag, (source) =>
        {
            
        });
        
        BuildContent += () =>
        {
            if (!EnemyHudOptions.ShowActionBar) return;
            if (!Properties.TryAdd(nameof(ActionBarTag), ActionBarTag)) return;
            
            BuildStack.Add(
                @<ActionBar Tag=@ActionBarTag
                           Box=@ActionBarBox
                           Percentage=@ActionPercentage
                ></ActionBar>);
        };
    }
    
    public void WithHPBar()
    {
        WhenInitialized<SourceElement>(HPBarTag, (source) =>
        {
            
        });
        
        BuildContent += () =>
        {
            if (!EnemyHudOptions.ShowActionBar) return;
            if (!Properties.TryAdd(nameof(HPBarTag), HPBarTag)) return;
            
            BuildStack.Add(
                @<PercentBar Tag=@HPBarTag
                            Box=@PercentBarBox
                            Percentage=@HPPercentage
                ></PercentBar>);
        };
    }
    
    public void WithContainer()
    {
        WhenInitialized<SourceElement>(EnemyHudContainer, (source) =>
        {
            
        });
        
        BuildContent += () =>
        {
            if (!EnemyHudOptions.ShowContainer) return;
            if (!Properties.TryAdd(nameof(EnemyHudContainer), EnemyHudContainer)) return;
            
            BuildStack.Add(
                @<PercentBar Tag=@EnemyHudContainer
                             Box=@PercentBarBox
                             Percentage=@HPPercentage
                 ></PercentBar>);
        };
    }

    public EnemyHudElement()
    {
        WithHPBar();
        WithActionBar();
        
        WhenInitialized<SourceElement>(EnemyHudContainer, (source) =>
        {
            source.Classes.Add("bar-grid-container");
        });
        
        Task.Delay(2000).ContinueWith(async t =>
        {

            try
            {
                var hold = ElementRegistry.ElementMap.Values.All(a =>
                {
                    if (a is IPercentage)
                    {
                        PercentBar item = a as PercentBar;

                        if (item.Tag == ActionBarTag)
                        {
                            item.delay = 1500;
                            item.delayMult = 1.2;
                            Task.Delay(2000).ContinueWith(async e =>
                            {
                                while (item.Percentage.Modify(10 * new Random().Next(1, 3)))
                                {
                                    await Task.Delay(item.delay);
                                }
                                Console.WriteLine("Complete1");
                            });
                            return true;
                        }
                        if (item.Tag == HPBarTag)
                        {
                            item.delayMult = (double)item.delay/10;

                            Task.Delay((int)(item.delay*1.3)).ContinueWith(async e =>
                            {
                                while (item.Percentage.Modify(-170 * new Random().Next(1, 3)))
                                {
                                    await Task.Delay((int)(2200));
                                }
                                Console.WriteLine("Complete2");
                            });
                            return true;
                        }
                    }
                    return true;
                });
                
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

        });
    }
    
}