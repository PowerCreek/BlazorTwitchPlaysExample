@using TBRPG_1.Game.Lib
@using TBRPG_1.Game.Elements
@using TBRPG_1.Game.Hud
@inherits SourceElement
@implements TBRPG_1.Game.Lib.IPercentage

@BuildRenderItem()

@code {

    [Parameter]
    public Percentage Percentage { get; set; } = new Percentage(1000,1000);

    [Parameter]
    public Rectangle Box { get; set; }

    [Parameter]
    public PercentOptions PercentOptions { get; set; } = new();

    [Parameter]
    public PercentBarOptions BarOptions { get; set; } = new();
    
    
    public readonly string OUTER_BOX = IIdentity.CreateUUID;
    public readonly string INNER_BOX = IIdentity.CreateUUID;
    
    public readonly string BACKING_BOX = IIdentity.CreateUUID;
    
    public readonly string TEXT_ITEM = IIdentity.CreateUUID;
    public readonly string TEXT_CONTAINER = IIdentity.CreateUUID;

    public override RenderFragment BuildRenderItem(Func<RenderFragment> induce = null)
    {
        return base.BuildRenderItem(() =>
        {
            return 
                @<SourceElement Parent=@this Tag=@OUTER_BOX>
                    @foreach (var renderItems in GetRenderItems().Reverse())
                    {
                        @renderItems
                    }
                </SourceElement>;
        });
    }

    public void ApplyBox(SourceElement source)
    {
        source.SetStyle = new() {Key = "left", Value = $"{Box.X}px"};
        source.SetStyle = new() {Key = "top", Value = $"{Box.Y}px"};
        source.SetStyle = new() {Key = "width", Value = $"{Box.Width}px"};
        source.SetStyle = new() {Key = "height", Value =  $"{Box.Height}px"};
    }

    public int delay = 1500;
    public double delayMult = (1500/3)*2;

    public void WithInnerBox()
    {
        
        WhenInitialized<SourceElement>(INNER_BOX, (source) =>
        {
            source.Classes.Add("bar");
            double innerDelay = (delay * 0.3);
            source.SetStyle = new() {Key = "transition", Value = $"width {innerDelay/1000}s ease-out"};
            source.SetStyle = new() {Key = "background-color", Value = BarOptions.InnerBarColor};
            source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
            source.SetStyle = new() {Key = "width", Value = $"{Box.Width*Percentage.Percent}px"};
            //
            // Box.OnChange += (x,y,w,h) =>
            // {
            //     source.SetStyle = new() {Key = "width", Value = $"{Box.Width * Percentage.Percent}px"};
            //     source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
            //     source.StateChanged();
            // };
            
            Percentage.OnChange += (val) =>
            {
                double piece = Math.Abs(val) / Percentage._Max;
                double innerDelay = delay*piece*.0009;
                source.SetStyle = new() {Key = "transition", Value = $"width {innerDelay}s linear"};
                source.SetStyle = new() {Key = "width", Value = $"{Box.Width * Percentage.Percent}px"};
                source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
                source.StateChanged();
            };
        });
        
        BuildContent += () =>
        {
            if (!PercentOptions.ShowFrontBar) return;
            if(!Properties.TryAdd(nameof(INNER_BOX), INNER_BOX)) return;
            
            BuildStack.Add(@<SourceElement Parent=@this Tag=@INNER_BOX></SourceElement>);
        };
    }
    
    public void WithBackingBox()
    {
        
        WhenInitialized<SourceElement>(BACKING_BOX, (source) =>
        {
            source.Classes.Add("bar");            
            double innerDelay = (delay * 0.7*Percentage.Percent);

            source.SetStyle = new() {Key = "transition", Value = $"width {innerDelay/1000}s ease-in-out"};
            source.SetStyle = new() {Key = "background-color", Value = BarOptions.BackBarColor};
            source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
            source.SetStyle = new() {Key = "width", Value = $"{Box.Width*Percentage.Percent}px"};
            
            Box.OnChange += (x,y,w,h) =>
            {
                double innerDelay = (delay * 0.7*Percentage.Percent);
                source.SetStyle = new() {Key = "transition", Value = $"width {innerDelay/1000}s ease-in-out"};
                source.SetStyle = new() {Key = "width", Value = $"{Box.Width * Percentage.Percent}px"};
                source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
                source.StateChanged();
            };

            Percentage.OnChange += (val) =>
            {
                double piece = Math.Abs(val) / Percentage._Max;
                double innerDelay = delay*piece*.002;
                source.SetStyle = new() {Key = "transition", Value = $"width {innerDelay}s ease-in-out"};
                source.SetStyle = new() {Key = "width", Value = $"{Box.Width * Percentage.Percent}px"};
                source.SetStyle = new() {Key = "height", Value = $"{Box.Height}px"};
                source.StateChanged();
            };
        });
        
        BuildContent += () =>
        {
            if (!PercentOptions.ShowBackBar) return;
            if (!Properties.TryAdd(nameof(BACKING_BOX), BACKING_BOX)) return;
            
            BuildStack.Add(@<SourceElement Parent=@this Tag=@BACKING_BOX></SourceElement>);
        };
    }
    
    public void WithTextPercentBox()
    {
        WhenInitialized<TextElement>(TEXT_ITEM, (source) =>
        {
            source.Text = $"{Percentage.Current}/{Percentage.Max}";
            source.StateChanged();

            Percentage.OnChange += (val) =>
            {
                source.Text = $"{Percentage.Current}/{Percentage.Max}";
                source.StateChanged();
            };

        });
        
        WhenInitialized<SourceElement>(TEXT_CONTAINER, (source) =>
        {
            source.Classes.Add("text");
            
            source.SetStyle = new() {Key = "-webkit-text-fill-color", Value = BarOptions.TextColor};
            
            source.StateChanged();
        });
        
        BuildContent += () =>
        {
            if (!PercentOptions.ShowText) return;
            if (!Properties.TryAdd(nameof(TEXT_ITEM), TEXT_ITEM)) return;
            
            Properties.Add(nameof(TEXT_CONTAINER), TEXT_CONTAINER);
            BuildStack.Add(@<SourceElement Parent=@this Tag=@TEXT_CONTAINER><TextElement Parent=@this Tag=@TEXT_ITEM></TextElement></SourceElement>);
        };
    }
    
    public PercentBar()
    {
        
        WithTextPercentBox();
        WithInnerBox();
        WithBackingBox();
        
        WhenInitialized<SourceElement>(OUTER_BOX, (source) =>
        {
            source.Classes.Add("percent-bar");
            source.SetStyle = new() {Key = "background-color", Value = PercentOptions.ShowBackground?BarOptions.BackgroundColor:"transparent"};
            ApplyBox(source);

            Box.OnChange += (x,y,w,h) =>
            {
                ApplyBox(source);
                StateChanged();
            };
        });
    }

}