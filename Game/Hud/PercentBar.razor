@inherits HudComponent
@using TBRPG_1.Game.Lib
@implements IPercenter
@RenderItem

@code {


    protected override void OnInitialized()
    {
        base.OnInitialized();
        ElementStyleMap[nameof(Bar)] += $"background-color: {color};";
        this.StateHasChanged();
    }
    
    [Parameter]
    public string color { get; set; } = "gray";
    
    public virtual Rectangle Box { get; set; } = new Rectangle
    {
        X=0,
        Y=0,
        Width=200,
        Height=30,
    };

    public RenderFragment RenderItem => 
        @<div class=@("percent-bar "+@Classes) style=@SizingParent>
            @foreach (var b in Bars)
            {
                @b
            }
        </div>;
    
    public virtual RenderFragment Bar =>
        @<div class="bar" 
              style=@($"{SizingPercent}" 
                      +$"{string.Join("; ", ElementStyleMap[nameof(Bar)])}")></div>;

    public virtual Dictionary<string, string> ElementStyleMap { get; set; } = new Dictionary<string, string>
    {
        {nameof(Bar), "transition: width 0.5s;"}
    };
    
    public virtual RenderFragment[] Bars => new RenderFragment[]
    {
        Bar
    };
    
    public int MaxPoints { get; set; } = 100;

    public int CurrentPoints { get; set; } = 100;

    public virtual  decimal Percentage => (decimal) CurrentPoints / MaxPoints;
    
    public string SizingParent =>
        $"left: {Box.X}px;" +
        $"top: {Box.Y}px;" +
        $"width: {Box.Width}px;" +
        $"height: {Box.Height}px;";
    
    public string SizingPercent =>
        $"left: {Box.X}px;" +
        $"top: {Box.Y}px;" +
        $"width: {Box.Width*Percentage}px;" +
        $"height: {Box.Height}px;";

    public virtual int ChangePercent(int delta)
    {
        try
        {

            if (CurrentPoints > 0 && delta > 0)
            {
                CurrentPoints -= delta;

                if (CurrentPoints <= 0)
                {
                    CurrentPoints = 0;
                    Console.WriteLine("reached minumum");
                }

                this.StateHasChanged();
                return CurrentPoints;
            }
            else
            {
                Console.WriteLine("percentage is already minumum");
                return -1;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return -1;
    }

}